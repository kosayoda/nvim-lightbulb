*nvim-lightbulb.txt*                    VSCode ðŸ’¡ for neovim's built-in LSP.

==============================================================================
Table of Contents                           *nvim-lightbulb-table-of-contents*

1. nvim-lightbulb                              |nvim-lightbulb-nvim-lightbulb|
  - Table of contents        |nvim-lightbulb-nvim-lightbulb-table-of-contents|
  - Introduction                  |nvim-lightbulb-nvim-lightbulb-introduction|
  - Prerequisites                |nvim-lightbulb-nvim-lightbulb-prerequisites|
  - Installation                  |nvim-lightbulb-nvim-lightbulb-installation|
  - Usage                                |nvim-lightbulb-nvim-lightbulb-usage|
  - Configuration                |nvim-lightbulb-nvim-lightbulb-configuration|

==============================================================================
1. nvim-lightbulb                              *nvim-lightbulb-nvim-lightbulb*

VSCode ðŸ’¡ for neovimâ€™s built-in LSP.


TABLE OF CONTENTS            *nvim-lightbulb-nvim-lightbulb-table-of-contents*

- |nvim-lightbulb-introduction|
- |nvim-lightbulb-prerequisites|
- |nvim-lightbulb-installation|
- |nvim-lightbulb-usage|
- |nvim-lightbulb-configuration|


INTRODUCTION                      *nvim-lightbulb-nvim-lightbulb-introduction*

The plugin shows a lightbulb in the sign column whenever a
`textDocument/codeAction` is available at the current cursor position.

This makes code actions both discoverable and efficient
<https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html#the-mighty>,
as code actions can be available even when there are no visible diagnostics
(warning, information, hints etc.).


FEATURES ~




  In the screenshot, colorscheme is catppuccin
  <https://github.com/catppuccin/nvim>, font is iosevka
  <https://typeof.net/Iosevka/>, programming language is rust
  <https://www.rust-lang.org/>
When there is a _code action_ available at the current cursor location, show a
lightbulbâ€¦

1. in the **sign column**
2. as **virtual text**
3. in a **floating window**

or, change the look of

1. the **number column**
2. the **current line**

or, get a configured message

1. as **status text**, retrievable with `require("nvim-lightbulb").get_status_text()`


PREREQUISITES                    *nvim-lightbulb-nvim-lightbulb-prerequisites*

- Neovim v0.9.0 and above. Older versions may work but are not tested.
- Working LSP server configuration.


INSTALLATION                      *nvim-lightbulb-nvim-lightbulb-installation*

Just like any other plugin.

Example using lazy.nvim <https://github.com/folke/lazy.nvim>:

>lua
    { 'kosayoda/nvim-lightbulb' }
<

Example using packer.nvim <https://github.com/wbthomason/packer.nvim>:

>lua
    use { 'kosayoda/nvim-lightbulb' }
<

Example using vim-plug <https://github.com/junegunn/vim-plug>:

>vim
    Plug 'kosayoda/nvim-lightbulb'
<


USAGE                                    *nvim-lightbulb-nvim-lightbulb-usage*

Place this in your neovim configuration.

>lua
    require("nvim-lightbulb").setup({
        autocmd = { enabled = true }
    })
<

- Configuration can be passed to `NvimLightbulb.setup`, or to `NvimLightbulb.update_lightbulb`.
- Any configuration passed to `update_lightbulb` will override the one in `setup`.
- For all options, see the |nvim-lightbulb-configuration| section.
- To debug `nvim-lightbulb` see `NvimLightbulb.debug`


CONFIGURATION                    *nvim-lightbulb-nvim-lightbulb-configuration*

>lua
    local default_config = {
        -- Priority of the lightbulb for all handlers except float.
        priority = 10,
    
        -- Whether or not to hide the lightbulb when the buffer is not focused.
        -- Only works if configured during NvimLightbulb.setup
        hide_in_unfocused_buffer = true,
    
        -- Whether or not to link the highlight groups automatically.
        -- Default highlight group links:
        --   LightBulbSign -> DiagnosticSignInfo
        --   LightBulbFloatWin -> DiagnosticFloatingInfo
        --   LightBulbVirtualText -> DiagnosticVirtualTextInfo
        --   LightBulbNumber -> DiagnosticSignInfo
        --   LightBulbLine -> CursorLine
        -- Only works if configured during NvimLightbulb.setup
        link_highlights = true,
    
        -- Perform full validation of configuration.
        -- Available options: "auto", "always", "never"
        --   "auto" only performs full validation in NvimLightbulb.setup.
        --   "always" performs full validation in NvimLightbulb.update_lightbulb as well.
        --   "never" disables config validation.
        validate_config = "auto",
    
        -- Code action kinds to observe.
        -- To match all code actions, set to `nil`.
        -- Otherwise, set to a table of kinds.
        -- Example: { "quickfix", "refactor.rewrite" }
        -- See: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionKind
        action_kinds = nil,
    
        -- Enable code lens support.
        -- If the current position has executable code lenses, the icon is changed from `text` to `lens_text`
        -- for sign, virtual_text, float and status_text.
        -- The code lens icon is configurable per handler.
        code_lenses = false,
    
        -- Configuration for various handlers:
        -- 1. Sign column.
        sign = {
            enabled = true,
            -- Text to show in the sign column.
            -- Must be between 1-2 characters.
            text = "ðŸ’¡",
            lens_text = "ðŸ”Ž",
            -- Highlight group to highlight the sign column text.
            hl = "LightBulbSign",
        },
    
        -- 2. Virtual text.
        virtual_text = {
            enabled = false,
            -- Text to show in the virt_text.
            text = "ðŸ’¡",
            lens_text = "ðŸ”Ž",
            -- Position of virtual text given to |nvim_buf_set_extmark|.
            -- Can be a number representing a fixed column (see `virt_text_pos`).
            -- Can be a string representing a position (see `virt_text_win_col`).
            pos = "eol",
            -- Highlight group to highlight the virtual text.
            hl = "LightBulbVirtualText",
            -- How to combine other highlights with text highlight.
            -- See `hl_mode` of |nvim_buf_set_extmark|.
            hl_mode = "combine",
        },
    
        -- 3. Floating window.
        float = {
            enabled = false,
            -- Text to show in the floating window.
            text = "ðŸ’¡",
            lens_text = "ðŸ”Ž",
            -- Highlight group to highlight the floating window.
            hl = "LightBulbFloatWin",
            -- Window options.
            -- See |vim.lsp.util.open_floating_preview| and |nvim_open_win|.
            -- Note that some options may be overridden by |open_floating_preview|.
            win_opts = {
                focusable = false,
            },
        },
    
        -- 4. Status text.
        -- When enabled, will allow using |NvimLightbulb.get_status_text|
        -- to retrieve the configured text.
        status_text = {
            enabled = false,
            -- Text to set if a lightbulb is available.
            text = "ðŸ’¡",
            lens_text = "ðŸ”Ž",
            -- Text to set if a lightbulb is unavailable.
            text_unavailable = "",
        },
    
        -- 5. Number column.
        number = {
            enabled = false,
            -- Highlight group to highlight the number column if there is a lightbulb.
            hl = "LightBulbNumber",
        },
    
        -- 6. Content line.
        line = {
            enabled = false,
            -- Highlight group to highlight the line if there is a lightbulb.
            hl = "LightBulbLine",
        },
    
        -- Autocmd configuration.
        -- If enabled, automatically defines an autocmd to show the lightbulb.
        -- If disabled, you will have to manually call |NvimLightbulb.update_lightbulb|.
        -- Only works if configured during NvimLightbulb.setup
        autocmd = {
            -- Whether or not to enable autocmd creation.
            enabled = false,
            -- See |updatetime|.
            -- Set to a negative value to avoid setting the updatetime.
            updatetime = 200,
            -- See |nvim_create_autocmd|.
            events = { "CursorHold", "CursorHoldI" },
            -- See |nvim_create_autocmd| and |autocmd-pattern|.
            pattern = { "*" },
        },
    
        -- Scenarios to not show a lightbulb.
        ignore = {
            -- LSP client names to ignore.
            -- Example: {"null-ls", "lua_ls"}
            clients = {},
            -- Filetypes to ignore.
            -- Example: {"neo-tree", "lua"}
            ft = {},
            -- Ignore code actions without a `kind` like refactor.rewrite, quickfix.
            actions_without_kind = false,
        },
    
        --- A general filter function for code actions.
        --- The function is called for code actions after any `ignore` or `action_kinds`
        --- options are applied.
        --- The function should return true to keep the code action, false otherwise.
        --- @type {client_name: string, lsp_kinds: string[]}[]
        filter = nil,
    }
<


FILTERING ~

Find the name of the LSP client and the actions you want to filter. For
example, to ignore the `ruff` `fix all` and `Organize Imports` actions:

>lua
    ...
        filter = {
            {
                client_name = "ruff",
                lsp_kinds = { "source.fixAll.ruff", "source.organizeImports.ruff" },
            },
        }
    ...
<

You can find all the information you need through `NvimLightbulb.debug`.

>lua
    ...
        [Code Actions]
        i With code action support: basedpyright, ruff, typos_lsp
    
            ruff
            1. Ruff (S603): Disable for this line quickfix
            2. Ruff: Fix all auto-fixable problems source.fixAll.ruff [Ignored (filter)]
        3. Ruff: Organize imports source.organizeImports.ruff [Ignored (filter)]
        ...
<

Here, `ruff` is the name of LSP client and the list below contains the name, as
well as the kind of the actions.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
