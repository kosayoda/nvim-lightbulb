------------------------------------------------------------------------------
                                                                *nvim-lightbulb*
*nvim-lightbulb*: VSCode ðŸ’¡ for neovim's built-in LSP.

--- Quickstart ---

Place this in your neovim configuration.
>
  require("nvim-lightbulb").setup({
    autocmd = { enabled = true }
  })

See |nvim-lightbulb-config| for available config settings.


--- Modify Highlights ---

To modify highlights, configure the corresponding highlight group.
See |nvim-lightbulb-config| for a list of highlights used.

Example:
>
   vim.api.nvim_set_hl(0, "LightBulbSign", {link = "DiagnosticSignWarn"})

------------------------------------------------------------------------------
                                                         *NvimLightbulb.setup()*

                        `NvimLightbulb.setup`({config})
Module setup.

Optional. Any configuration can also be passed to |NvimLightbulb.update_lightbulb|.

Parameters~
{config} `(table|nil)` Partial or full configuration table. See |nvim-lightbulb-config|.

Usage~
`require('nvim-lightbulb').setup({})`

------------------------------------------------------------------------------
                                               *NvimLightbulb.get_status_text()*

                    `NvimLightbulb.get_status_text`({bufnr})

Get the configured text according to lightbulb status.
Any configuration provided overrides the defaults passed to |NvimLightbulb.setup|.

Parameters~
{bufnr} `(number|nil)` Buffer handle. Defaults to current buffer.

Usage~
`require('nvim-lightbulb').get_status_text()`

------------------------------------------------------------------------------
                                              *NvimLightbulb.update_lightbulb()*

                   `NvimLightbulb.update_lightbulb`({config})

Display the lightbulb according to configuration.
Any configuration provided overrides the defaults passed to |NvimLightbulb.setup|.

Parameters~
{config} `(table|nil)` Partial or full configuration table. See |nvim-lightbulb-config|.

Usage~
`require('nvim-lightbulb').update_lightbulb({})`

------------------------------------------------------------------------------
                                                         *NvimLightbulb.debug()*

                        `NvimLightbulb.debug`({config})

Display debug information related to nvim-lightbulb.
Prints information about:
- The current configuration
- LSP servers found, ignored, supporting code actions...
- Any code actions at the current location along with their code action kind

Parameters~
{config} `(table|nil)` Partial or full configuration table. See |nvim-lightbulb-config|.

Usage~
`require('nvim-lightbulb').debug({})`


------------------------------------------------------------------------------
                                                         *nvim-lightbulb-config*

Pass the configuration to |NvimLightbulb.setup| or |NvimLightbulb.update_lightbulb|.

Default values:
>
  local default_config = {
    -- Priority of the lightbulb for all handlers except float.
    priority = 10,

    -- Whether or not to hide the lightbulb when the buffer is not focused.
    -- Only works if configured during NvimLightbulb.setup
    hide_in_unfocused_buffer = true,

    -- Whether or not to link the highlight groups automatically.
    -- Default highlight group links:
    --   LightBulbSign -> DiagnosticSignInfo
    --   LightBulbFloatWin -> DiagnosticFloatingInfo
    --   LightBulbVirtualText -> DiagnosticVirtualTextInfo
    --   LightBulbNumber -> DiagnosticSignInfo
    --   LightBulbLine -> CursorLine
    -- Only works if configured during NvimLightbulb.setup
    link_highlights = true,

    -- Perform full validation of configuration.
    -- Available options: "auto", "always", "never"
    --   "auto" only performs full validation in NvimLightbulb.setup.
    --   "always" performs full validation in NvimLightbulb.update_lightbulb as well.
    --   "never" disables config validation.
    validate_config = "auto",

    -- Code action kinds to observe.
    -- To match all code actions, set to `nil`.
    -- Otherwise, set to a table of kinds.
    -- Example: { "quickfix", "refactor.rewrite" }
    -- See: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionKind
    action_kinds = nil,

    -- Configuration for various handlers:
    -- 1. Sign column.
    sign = {
      enabled = true,
      -- Text to show in the sign column.
      -- Must be between 1-2 characters.
      text = "ðŸ’¡",
      -- Highlight group to highlight the sign column text.
      hl = "LightBulbSign",
    },

    -- 2. Virtual text.
    virtual_text = {
      enabled = false,
      -- Text to show in the virt_text.
      text = "ðŸ’¡",
      -- Position of virtual text given to |nvim_buf_set_extmark|.
      -- Can be a number representing a fixed column (see `virt_text_pos`).
      -- Can be a string representing a position (see `virt_text_win_col`).
      pos = "eol",
      -- Highlight group to highlight the virtual text.
      hl = "LightBulbVirtualText",
      -- How to combine other highlights with text highlight.
      -- See `hl_mode` of |nvim_buf_set_extmark|.
      hl_mode = "combine",
    },

    -- 3. Floating window.
    float = {
      enabled = false,
      -- Text to show in the floating window.
      text = "ðŸ’¡",
      -- Highlight group to highlight the floating window.
      hl = "LightBulbFloatWin",
      -- Window options.
      -- See |vim.lsp.util.open_floating_preview| and |nvim_open_win|.
      -- Note that some options may be overridden by |open_floating_preview|.
      win_opts = {
        focusable = false,
      },
    },

    -- 4. Status text.
    -- When enabled, will allow using |NvimLightbulb.get_status_text|
    -- to retrieve the configured text.
    status_text = {
      enabled = false,
      -- Text to set if a lightbulb is available.
      text = "ðŸ’¡",
      -- Text to set if a lightbulb is unavailable.
      text_unavailable = "",
    },

    -- 5. Number column.
    number = {
      enabled = false,
      -- Highlight group to highlight the number column if there is a lightbulb.
      hl = "LightBulbNumber",
    },

    -- 6. Content line.
    line = {
      enabled = false,
      -- Highlight group to highlight the line if there is a lightbulb.
      hl = "LightBulbLine",
    },

    -- Autocmd configuration.
    -- If enabled, automatically defines an autocmd to show the lightbulb.
    -- If disabled, you will have to manually call |NvimLightbulb.update_lightbulb|.
    -- Only works if configured during NvimLightbulb.setup
    autocmd = {
      -- Whether or not to enable autocmd creation.
      enabled = false,
      -- See |updatetime|.
      -- Set to a negative value to avoid setting the updatetime.
      updatetime = 200,
      -- See |nvim_create_autocmd|.
      events = { "CursorHold", "CursorHoldI" },
      -- See |nvim_create_autocmd| and |autocmd-pattern|.
      pattern = { "*" },
    },

    -- Scenarios to not show a lightbulb.
    ignore = {
      -- LSP client names to ignore.
      -- Example: {"null-ls", "lua_ls"}
      clients = {},
      -- Filetypes to ignore.
      -- Example: {"neo-tree", "lua"}
      ft = {},
      -- Actions to ignore. To ignore code actions without a `kind` like refactor.rewrite, add "" to the table.
      -- Example: {"source.fixAll", ""}
      actions = {},
    },
  }

<


 vim:tw=78:ts=8:noet:ft=help:norl:
